package zmuzik.czechstocks.dao;

import zmuzik.czechstocks.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TODAYS_QUOTE.
 */
public class TodaysQuote {

    private Long id;
    /** Not-null value. */
    private String isin;
    /** Not-null value. */
    private java.util.Date stamp;
    private double price;
    private double volume;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TodaysQuoteDao myDao;

    private Stock stock;
    private String stock__resolvedKey;


    public TodaysQuote() {
    }

    public TodaysQuote(Long id) {
        this.id = id;
    }

    public TodaysQuote(Long id, String isin, java.util.Date stamp, double price, double volume) {
        this.id = id;
        this.isin = isin;
        this.stamp = stamp;
        this.price = price;
        this.volume = volume;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTodaysQuoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getIsin() {
        return isin;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIsin(String isin) {
        this.isin = isin;
    }

    /** Not-null value. */
    public java.util.Date getStamp() {
        return stamp;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStamp(java.util.Date stamp) {
        this.stamp = stamp;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public double getVolume() {
        return volume;
    }

    public void setVolume(double volume) {
        this.volume = volume;
    }

    /** To-one relationship, resolved on first access. */
    public Stock getStock() {
        String __key = this.isin;
        if (stock__resolvedKey == null || stock__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StockDao targetDao = daoSession.getStockDao();
            Stock stockNew = targetDao.load(__key);
            synchronized (this) {
                stock = stockNew;
            	stock__resolvedKey = __key;
            }
        }
        return stock;
    }

    public void setStock(Stock stock) {
        if (stock == null) {
            throw new DaoException("To-one property 'isin' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.stock = stock;
            isin = stock.getIsin();
            stock__resolvedKey = isin;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
