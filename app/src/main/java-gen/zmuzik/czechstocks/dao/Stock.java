package zmuzik.czechstocks.dao;

import java.util.List;
import zmuzik.czechstocks.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table STOCK.
 */
public class Stock {

    /** Not-null value. */
    private String isin;
    /** Not-null value. */
    private String name;
    private boolean showInQuotesList;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StockDao myDao;

    private CurrentQuote currentQuote;
    private String currentQuote__resolvedKey;

    private List<TodaysQuote> todaysQuoteList;
    private List<HistoricalQuote> historicalQuoteList;
    private List<StockDetail> stockDetailList;
    private List<Dividend> dividendList;

    public Stock() {
    }

    public Stock(String isin) {
        this.isin = isin;
    }

    public Stock(String isin, String name, boolean showInQuotesList) {
        this.isin = isin;
        this.name = name;
        this.showInQuotesList = showInQuotesList;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStockDao() : null;
    }

    /** Not-null value. */
    public String getIsin() {
        return isin;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIsin(String isin) {
        this.isin = isin;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public boolean getShowInQuotesList() {
        return showInQuotesList;
    }

    public void setShowInQuotesList(boolean showInQuotesList) {
        this.showInQuotesList = showInQuotesList;
    }

    /** To-one relationship, resolved on first access. */
    public CurrentQuote getCurrentQuote() {
        String __key = this.isin;
        if (currentQuote__resolvedKey == null || currentQuote__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CurrentQuoteDao targetDao = daoSession.getCurrentQuoteDao();
            CurrentQuote currentQuoteNew = targetDao.load(__key);
            synchronized (this) {
                currentQuote = currentQuoteNew;
            	currentQuote__resolvedKey = __key;
            }
        }
        return currentQuote;
    }

    public void setCurrentQuote(CurrentQuote currentQuote) {
        if (currentQuote == null) {
            throw new DaoException("To-one property 'isin' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.currentQuote = currentQuote;
            isin = currentQuote.getIsin();
            currentQuote__resolvedKey = isin;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TodaysQuote> getTodaysQuoteList() {
        if (todaysQuoteList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TodaysQuoteDao targetDao = daoSession.getTodaysQuoteDao();
            List<TodaysQuote> todaysQuoteListNew = targetDao._queryStock_TodaysQuoteList(isin);
            synchronized (this) {
                if(todaysQuoteList == null) {
                    todaysQuoteList = todaysQuoteListNew;
                }
            }
        }
        return todaysQuoteList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTodaysQuoteList() {
        todaysQuoteList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<HistoricalQuote> getHistoricalQuoteList() {
        if (historicalQuoteList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HistoricalQuoteDao targetDao = daoSession.getHistoricalQuoteDao();
            List<HistoricalQuote> historicalQuoteListNew = targetDao._queryStock_HistoricalQuoteList(isin);
            synchronized (this) {
                if(historicalQuoteList == null) {
                    historicalQuoteList = historicalQuoteListNew;
                }
            }
        }
        return historicalQuoteList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHistoricalQuoteList() {
        historicalQuoteList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StockDetail> getStockDetailList() {
        if (stockDetailList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StockDetailDao targetDao = daoSession.getStockDetailDao();
            List<StockDetail> stockDetailListNew = targetDao._queryStock_StockDetailList(isin);
            synchronized (this) {
                if(stockDetailList == null) {
                    stockDetailList = stockDetailListNew;
                }
            }
        }
        return stockDetailList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStockDetailList() {
        stockDetailList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Dividend> getDividendList() {
        if (dividendList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DividendDao targetDao = daoSession.getDividendDao();
            List<Dividend> dividendListNew = targetDao._queryStock_DividendList(isin);
            synchronized (this) {
                if(dividendList == null) {
                    dividendList = dividendListNew;
                }
            }
        }
        return dividendList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDividendList() {
        dividendList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
