package zmuzik.czechstocks.dao;

import zmuzik.czechstocks.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table QUOTATION_LIST_ITEM.
 */
public class QuotationListItem {

    /** Not-null value. */
    private String isin;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuotationListItemDao myDao;

    private CurrentTradingData currentTradingData;
    private String currentTradingData__resolvedKey;


    public QuotationListItem() {
    }

    public QuotationListItem(String isin) {
        this.isin = isin;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuotationListItemDao() : null;
    }

    /** Not-null value. */
    public String getIsin() {
        return isin;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIsin(String isin) {
        this.isin = isin;
    }

    /** To-one relationship, resolved on first access. */
    public CurrentTradingData getCurrentTradingData() {
        String __key = this.isin;
        if (currentTradingData__resolvedKey == null || currentTradingData__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CurrentTradingDataDao targetDao = daoSession.getCurrentTradingDataDao();
            CurrentTradingData currentTradingDataNew = targetDao.load(__key);
            synchronized (this) {
                currentTradingData = currentTradingDataNew;
            	currentTradingData__resolvedKey = __key;
            }
        }
        return currentTradingData;
    }

    public void setCurrentTradingData(CurrentTradingData currentTradingData) {
        if (currentTradingData == null) {
            throw new DaoException("To-one property 'isin' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.currentTradingData = currentTradingData;
            isin = currentTradingData.getIsin();
            currentTradingData__resolvedKey = isin;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
