package zmuzik.czechstocks.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import zmuzik.czechstocks.App;
import zmuzik.czechstocks.dao.CurrentQuoteDao;
import zmuzik.czechstocks.dao.DividendDao;
import zmuzik.czechstocks.dao.StockDetailDao;
import zmuzik.czechstocks.dao.TodaysQuoteDao;
import zmuzik.czechstocks.dao.HistoricalQuoteDao;
import zmuzik.czechstocks.dao.StockDao;
import zmuzik.czechstocks.dao.PortfolioItemDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 10): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 11;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        CurrentQuoteDao.createTable(db, ifNotExists);
        DividendDao.createTable(db, ifNotExists);
        StockDetailDao.createTable(db, ifNotExists);
        TodaysQuoteDao.createTable(db, ifNotExists);
        HistoricalQuoteDao.createTable(db, ifNotExists);
        StockDao.createTable(db, ifNotExists);
        PortfolioItemDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        CurrentQuoteDao.dropTable(db, ifExists);
        DividendDao.dropTable(db, ifExists);
        StockDetailDao.dropTable(db, ifExists);
        TodaysQuoteDao.dropTable(db, ifExists);
        HistoricalQuoteDao.dropTable(db, ifExists);
        StockDao.dropTable(db, ifExists);
        PortfolioItemDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            if (newVersion == 11 && oldVersion < 11) {
                db.execSQL("insert into stock values('CZ0009000089','CETIN',1);");
                db.execSQL("insert into stock values('CZ0009000121','KOFOLA ÄŒS',1);");
            } else {
                dropAllTables(db, true);
                onCreate(db);
            }
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(CurrentQuoteDao.class);
        registerDaoClass(DividendDao.class);
        registerDaoClass(StockDetailDao.class);
        registerDaoClass(TodaysQuoteDao.class);
        registerDaoClass(HistoricalQuoteDao.class);
        registerDaoClass(StockDao.class);
        registerDaoClass(PortfolioItemDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
